# -*- Perl -*-
#
# File:  conf/gcs/gcs.conf
# Desc:  Configuration file for GCS server daemon
# Date:  Mon Mar 26 13:25:20 2007
#
# Note:  This must be a valid Perl5 'hash reference' data structure
#

{   #--------------------------------------------------------
    # The 'LogLevel' can be set when starting the server
    # by using the '-l <n>' command-line option. Also, the
    # 'LogLevel' can be changed while the server is running
    # via the '-logincr' the '-logdecr' and the '-logreset' 
    # command-line options with the server startup script.
    #
    # For LogFile, PidFile and UidFile names use only a file
    # 'leaf' when files are located in the data/gcs subdir.
    # The optional UidFile, when used, contains one line with
    # a numeric uid, a colon, and a numeric gid (nnnnn:nnn).
    #
    # When file(s) are located elsewhere, use a full path.
    # (UidFile is optional. See Uid and Gid settings, below.)
    #--------------------------------------------------------

    LogLevel	=> 3,
    LogFile 	=> 'server.log',
    PidFile 	=> 'server.pid',
    UidFile	=> '',               # or 'uidgid.dat'

    #--------------------------------------------------------
    # To force the server to be owned by a specific user
    # or group, set either Uid/Gid or Uname/Gname values.
    # As an alternative, a 'uidgid.dat' file can be placed
    # in the 'data/gcs' subdir that contains one line with
    # a numeric uid, a colon, and a numeric gid (nnnnn:nnn).
    # (These are optional. See the UidFile setting, above.)
    #--------------------------------------------------------

    Uid		=> 0,
    Gid		=> 0,
  # Uname	=> '',
  # Gname	=> '',

    #--------------------------------------------------------
    # PathEnv is used to reset the PATH environment variable.
    # Make sure to run daemon Perl scripts with the '-T'
    # (taint) switch to help avoid malicious input problems.
    #
    # QueueIdEnv is the Environment Variable name that is set
    # in each child process run by the Proc class. This is
    # useful in some cases if an external resource needs to
    # be associated with a given 'Process Slot' see man page
    # in POE::Component::GCS::Server::Proc for details.
    #--------------------------------------------------------

    PathEnv	=> '/bin:/sbin:/usr/bin:/usr/sbin',
    QueueIdEnv	=> 'GCS_RESOURCE_ID',

    #--------------------------------------------------------
    # Note that the existance of a port number in the various
    # '*_Port' entries will cause a network server to start
    # on that port with the indicated protocol. If no server
    # of a given protocol is necessary, use an empty value.
    #--------------------------------------------------------

    MsgPort	=> 0,           # Msg-baed  client/server IO
    TxtPort	=> 23457,       # Text-baed client/server IO

    #--------------------------------------------------------
    # ProcMax is the maximum number of concurrent child 
    # processes. The default is 5. Additional process
    # requests will be queued until a slot is available
    # unless the queue is "full" as described next.
    #
    # QueueMax is the maximum number of queued tasks. The 
    # default value is 0, meaning unlimited. When QueueMax
    # is used and process requests would exceed the maximum
    # (i.e. the queue is "full"), the request is refused 
    # and an error is generated.
    #--------------------------------------------------------

    ProcMax	=> 5,           # Default value is 5
    QueueMax	=> 0,           # Use '0' for 'unlimited'

    #--------------------------------------------------------
    # Do not change the values below unless you plan to
    # create custom subclass(es) to use as alternatives.
    # See the 'LogDemo' class, below, as one such example.
    #--------------------------------------------------------

    CfgClass	=> "POE::Component::GCS::Server::Cfg",
    CmdClass	=> "POE::Component::GCS::Server::Cmd",
    LogClass	=> "POE::Component::GCS::Server::Log",
  # LogClass	=> "POE::Component::GCS::Server::LogDemo",
    MsgClass	=> "POE::Component::GCS::Server::Msg",
    ProcClass	=> "POE::Component::GCS::Server::Proc",
    QueueClass	=> "POE::Component::GCS::Server::Queue",
    TaskClass	=> "POE::Component::GCS::Server::Task",
    TcpClass	=> "POE::Component::GCS::Server::TCP",

}   #-----------------------------------------------------------
